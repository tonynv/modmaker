name: Python Package Publish

on:
  push:
    branches: ["develop", "main"]
  pull_request:
    branches: ["develop", "main"]

permissions:
  contents: write
  pull-requests: read
  id-token: write  # Required for PyPI trusted publishing

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest pytest-cov
          pip install -e .
      - name: Test with pytest
        run: |
          # Run all tests including those for bin/modmaker entrypoint
          pytest

  publish-test-pypi:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Check and bump version if needed
        id: check_and_bump_version
        run: |
          # Configure git
          git config --local user.email "avattathil@gmail.com"
          git config --local user.name "tonynv"
          
          # Get current version
          CURRENT_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version was changed in this commit
          git checkout HEAD~1 pyproject.toml
          PREVIOUS_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
          git checkout HEAD pyproject.toml
          
          # If version hasn't changed, bump it
          if [ "$CURRENT_VERSION" == "$PREVIOUS_VERSION" ]; then
            echo "Version unchanged, bumping patch version..."
            
            # Create .bumpversion.cfg if it doesn't exist
            if [ ! -f .bumpversion.cfg ]; then
                echo "[bumpversion]" > .bumpversion.cfg
                echo "current_version = $CURRENT_VERSION" >> .bumpversion.cfg
                echo "commit = True" >> .bumpversion.cfg
                echo "tag = False" >> .bumpversion.cfg
                echo "parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)" >> .bumpversion.cfg
                echo "serialize = " >> .bumpversion.cfg
                echo "	{major}.{minor}.{patch}" >> .bumpversion.cfg
                echo "" >> .bumpversion.cfg
                echo "[bumpversion:file:pyproject.toml]" >> .bumpversion.cfg
                echo "search = version = \"{current_version}\"" >> .bumpversion.cfg
                echo "replace = version = \"{new_version}\"" >> .bumpversion.cfg
                echo "" >> .bumpversion.cfg
                echo "[bumpversion:file:modmaker/pyproject.toml]" >> .bumpversion.cfg
                echo "search = version = \"{current_version}\"" >> .bumpversion.cfg
                echo "replace = version = \"{new_version}\"" >> .bumpversion.cfg
            fi
            
            # Bump patch version directly with sed
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" modmaker/pyproject.toml
            sed -i "s/current_version = $CURRENT_VERSION/current_version = $NEW_VERSION/" .bumpversion.cfg
            
            # Get new version
            NEW_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
            
            # Commit the version bump
            git add pyproject.toml modmaker/pyproject.toml .bumpversion.cfg
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push origin develop
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version already changed, using current version: $CURRENT_VERSION"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: Build package
        run: python -m build
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  release-and-publish:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine bump2version
      - name: Check and bump version if needed
        id: check_and_bump_version
        run: |
          # Configure git
          git config --local user.email "avattathil@gmail.com"
          git config --local user.name "tonynv"
          
          # Get current version
          CURRENT_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version was changed in this commit
          git checkout HEAD~1 pyproject.toml
          PREVIOUS_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
          git checkout HEAD pyproject.toml
          
          # If version hasn't changed, bump it
          if [ "$CURRENT_VERSION" == "$PREVIOUS_VERSION" ]; then
            echo "Version unchanged, bumping patch version..."
            
            # Create .bumpversion.cfg if it doesn't exist
            if [ ! -f .bumpversion.cfg ]; then
                echo "[bumpversion]" > .bumpversion.cfg
                echo "current_version = $CURRENT_VERSION" >> .bumpversion.cfg
                echo "commit = True" >> .bumpversion.cfg
                echo "tag = False" >> .bumpversion.cfg
                echo "parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)" >> .bumpversion.cfg
                echo "serialize = " >> .bumpversion.cfg
                echo "	{major}.{minor}.{patch}" >> .bumpversion.cfg
                echo "" >> .bumpversion.cfg
                echo "[bumpversion:file:pyproject.toml]" >> .bumpversion.cfg
                echo "search = version = \"{current_version}\"" >> .bumpversion.cfg
                echo "replace = version = \"{new_version}\"" >> .bumpversion.cfg
                echo "" >> .bumpversion.cfg
                echo "[bumpversion:file:modmaker/pyproject.toml]" >> .bumpversion.cfg
                echo "search = version = \"{current_version}\"" >> .bumpversion.cfg
                echo "replace = version = \"{new_version}\"" >> .bumpversion.cfg
            fi
            
            # Bump patch version directly with sed
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" modmaker/pyproject.toml
            sed -i "s/current_version = $CURRENT_VERSION/current_version = $NEW_VERSION/" .bumpversion.cfg
            
            # Get new version
            NEW_VERSION=$(grep -m 1 'version = "' pyproject.toml | cut -d'"' -f2)
            
            # Commit the version bump
            git add pyproject.toml modmaker/pyproject.toml .bumpversion.cfg
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push origin main
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version already changed, using current version: $CURRENT_VERSION"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: Create Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Check if tag already exists
          if ! git rev-parse "v${{ steps.check_and_bump_version.outputs.version }}" >/dev/null 2>&1; then
            git tag -a v${{ steps.check_and_bump_version.outputs.version }} -m "Release v${{ steps.check_and_bump_version.outputs.version }}"
            git push origin v${{ steps.check_and_bump_version.outputs.version }}
          else
            echo "Tag v${{ steps.check_and_bump_version.outputs.version }} already exists, skipping tag creation"
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check_and_bump_version.outputs.version }}
          name: Release v${{ steps.check_and_bump_version.outputs.version }}
          generate_release_notes: true
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true